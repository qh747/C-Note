#include "LinkList.h"

// 链表测试函数
void fundLinkTest()
{
	// 反转链表
	// ReverseLinkList_Solution solu;
	// solu.ReverseListTest();

	// 链表内指定区间反转
	// ReverseBetween_Solution solu;
	// solu.ReverseBetweenTest();

	// 合并两个排序的链表
	// Merge_Solution solu;
	// solu.MergeTest();

	// 合并K个已排序的链表
	// mergeKLists_Solution solu;
	// solu.mergeKListsTest();

	// 判断链表中是否有环
	// HasCycle_Solution solu;
	// solu.hasCycleTest();

	// 链表中环的入口节点
	// EntryNodeOfLoop_Solution solu;
	// solu.EntryNodeOfLoopTest();

	// 链表中倒数最后K个节点
	// FindKthToTail_Solution solu;
	// solu.FindKthToTailTest();

	// 两个链表的第一个公共节点
	// FindFirstCommonNode_Solution solu;
	// solu.FindKthToTailTest();

	// 链表相加（二）
	// addInList_Solution solu;
	// solu.addInListTest();

	// 单链表的排序
	// sortInList_Solution solu;
	// solu.sortInListTest();

	// 判断一个链表是否为回文结构
	// isPail_Solution solu;
	// solu.isPailTest();

	// 链表的奇偶重排
	// oddEvenList_Solution solu;
	// solu.oddEvenListTest();

	// 删除有序链表中重复的元素-I
	// deleteDuplicates_Solution solu;
	// solu.deleteDuplicatesTest();

	// 删除有序链表中重复的元素-II
	deleteDuplicatesII_Solution solu;
	solu.deleteDuplicatesIITest();
}

int main()
{
	// 链表测试函数
	fundLinkTest();

	return 0;
}